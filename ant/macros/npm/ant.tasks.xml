<?xml version="1.0"?>

<project name="tasks.npm.xml">

   <dirname property="tasks.npm.dir" file="${ant.file.tasks.npm.xml}"/>
   <property name='npmrc.template.file' location='${tasks.npm.dir}/npmrc.template'/>

   <macrodef name='get.local.node.js.package'>
      <!-- now, can
                        npm install -g /tmp/inline-debug.tar
             rm /tmp/inline-debug.tar -->
      <attribute name='fromdir' default='${nodelibs.tar.dir}'/>
      <attribute name='todir'/>
      <attribute name='name'/>
      <sequential>
         <copy file='@{fromdir}/@{name}.tar' tofile='@{todir}/@{name}.tar'/>
      </sequential>
   </macrodef>

   <macrodef name='create.node.js.package'>
      <!-- now, can
                        npm install -g /tmp/inline-debug.tar
             rm /tmp/inline-debug.tar -->
      <attribute name='srcdir'/>
      <attribute name='outdir' default='${nodelibs.tar.dir}'/>
      <attribute name='name'/>
      <sequential>
         <!-- does this need an out-of-date check ? -->
         <compile.javascript.macro/>
         <mkdir dir='@{outdir}'/>
         <tar destfile='@{outdir}/@{name}.tar' basedir='@{srcdir}'/>
      </sequential>
   </macrodef>

   <macrodef name='create.npmrc.file'>
      <attribute name='dest.dir'/>
      <attribute name='npmrc.template.file' default='${npmrc.template.file}'/>
      <attribute name='npm.registry.1' default='${npm.registry.1}'/>
      <attribute name='npm.registry.2' default='${npm.registry.2}'/>
      <sequential>
         <copy tofile='@{dest.dir}/npmrc' file='@{npmrc.template.file}' overwrite='true'>
            <filterset>
               <filter token='REGISTRY1'           value="@{npm.registry.1}"/>
               <filter token='REGISTRY2'           value="@{npm.registry.2}"/>
            </filterset>
         </copy>
      </sequential>
   </macrodef>

   <macrodef name='npm.build'>
      <attribute name='src.dir'/>
      <attribute name='dist.dir'/>
      <attribute name='tmp.npm.dir' default='${tmp.npm.dir}'/>
      <element name='arguments' optional='true'/>
      <sequential>
         <copy todir='@{dist.dir}'>
            <fileset dir='@{src.dir}' excludes='build.xml'/>
         </copy>
         <check.if.executable.exists executable='npm'/>
         <if>
            <equals arg1='${npm.use.local.repos}' arg2='false'/>
            <then>
               <exec executable='cmd' dir='@{dist.dir}' failonerror='true' osfamily='windows'>
                  <arguments/>
                  <arg value='/c'/>
                  <arg value='npm'/>
                  <arg value='install'/>
               </exec>
               <exec executable='npm' dir='@{dist.dir}' failonerror='true' osfamily='unix'>
                  <arguments/>
                  <arg value='install'/>
               </exec>
            </then>
            <else>
               <mkdir dir='@{tmp.npm.dir}'/>
               <create.npmrc.file dest.dir='@{tmp.npm.dir}'/>
               <exec executable='cmd' dir='@{dist.dir}' failonerror='true' osfamily='windows'>
                  <arguments/>
                  <arg value='/c'/>
                  <arg value='npm'/>
                  <arg value='install'/>
                  <arg value='--userconfig=@{tmp.npm.dir}/npmrc'/>
               </exec>
               <exec executable='npm' dir='@{dist.dir}' failonerror='true' osfamily='unix'>
                  <arguments/>
                  <arg value='install'/>
                  <arg value='--userconfig=@{tmp.npm.dir}/npmrc'/>
               </exec>
            </else>
         </if>
      </sequential>
   </macrodef>

   <macrodef name='execNpm'>
      <attribute name='dir'/>
      <element name='arguments' optional='true'/>
      <sequential>
         <check.if.executable.exists executable='npm'/>
         <exec executable='cmd' dir='@{dir}' failonerror='true' osfamily='windows'>
            <arg value='/c'/>
            <arg value='npm'/>
            <arguments/>
         </exec>
         <exec executable='npm' dir='@{dir}' failonerror='true' osfamily='unix'>
            <arguments/>
         </exec>
      </sequential>
   </macrodef>

   <macrodef name='tsc.build'>
      <attribute name='src.dir'/>
      <attribute name='dist.dir'/>
      <sequential>
         <check.if.executable.exists executable='tsc'/>
         <exec executable='cmd' dir='@{src.dir}' failonerror='true' osfamily='windows'>
            <arg value='/c'/>
            <arg value='tsc'/>
            <arg value='-b'/>
            <arg value='tsconfig.json'/>
         </exec>
         <exec executable='tsc' dir='@{src.dir}' failonerror='true' osfamily='unix'>
            <arg value='-b'/>
            <arg value='tsconfig.json'/>
         </exec>
         <copy todir='@{dist.dir}'>
            <fileset dir='@{src.dir}'>
               <include name='ormconfig.json'/>
               <include name='package.json'/>
            </fileset>
         </copy>
      </sequential>
   </macrodef>

   <macrodef name='verify.node.tools'>
      <sequential>
         <check.component.version tool.name='node'  tool.version='v12.18.4'/>
         <check.component.version tool.name='npm'   tool.version='6.14.6'/>
         <check.component.version tool.name='tsc'   tool.version='Version 3.7.2'/>
      </sequential>
   </macrodef>

   <macrodef name='check.component.version'>
      <attribute name='tool.name'/>
      <attribute name='tool.version'/>
      <sequential>
         <local name='actual.tool.version'/>
         <exec executable="/bin/sh" outputproperty='actual.tool.version' failonerror="true" osfamily="unix">
            <arg value="-c"/>
               <arg value="@{tool.name} --version"/>
         </exec>
         <exec executable="cmd" outputproperty='actual.tool.version' failonerror="true" osfamily="windows">
            <arg value="/c"/>
            <arg value="@{tool.name} --version"/>
         </exec>
         <fail message="Found @{tool.name} version ${actual.tool.version} but expected @{tool.version}">
            <condition>
               <not>
                  <equals arg1="${actual.tool.version}" arg2="@{tool.version}"/>
               </not>
            </condition>
         </fail>
      </sequential>
   </macrodef>

   <verify.node.tools/>

</project>
