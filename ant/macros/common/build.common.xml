<?xml version='1.0' encoding='ISO-8859-1'?>
<project name='build.common' default='dist' xmlns:ivy='antlib:org.apache.ivy.ant'>

   <dirname property='build.common.xml.dir' file='${ant.file.build.common}'/>

   <!-- antcall reparses the build file, let's see if we can do this without reparsing -->
   <scriptdef name="antCallTarget" language="javascript">
      <attribute name='target'/>
      <![CDATA[
         target = attributes.get("target");
         // echo = self.project.createTask("echo");
         // echo.setMessage("antCallTarget:" + target);
         // echo.perform();
         self.project.executeTarget(target);
         // echoTask = self.project.createTask("echo");
         // echoTask.setMessage("antCallTarget out:" + target);
         // echoTask.perform();
      ]]>
   </scriptdef>

   <macrodef name='abacus.project.build'>
      <attribute name='dir'/>
      <attribute name='project' default='NOT SET'/>
      <attribute name='target' default='dist'/>
      <sequential>
         <local name='project'/>
         <if>
            <equals arg1='@{project}' arg2='NOT SET'/>
            <then>
               <basename property='project' file='@{dir}'/>
            </then>
            <else>
               <property name='project' value='@{project}'/>
            </else>
         </if>
         <mkdir dir='${dist.root}/tmp'/>
         <local name='up-to-date'/>
         <!-- echo message='Checking files in @{dir} against ${dist.root}/tmp/@{project}.built.at'/ -->
         <uptodate property='up-to-date' targetfile='${dist.root}/tmp/${project}.built.at'>
            <srcfiles dir='@{dir}' includes='**/*'/>
         </uptodate>
         <if>
            <not>
               <isset property='up-to-date'/>
            </not>
            <then>
               <!-- echo message='calling subant for @{dir}'/ -->
               <subant target='@{target}' inheritrefs='false'>
                  <fileset dir='@{dir}' includes='build.xml'/>
               </subant>
               <touch file='${dist.root}/tmp/${project}.built.at'/>
            </then>
            <else>
               <echo message='${project} already up to date'/>
            </else>
         </if>
      </sequential>
   </macrodef>

   <macrodef name='build.dependent'>
      <attribute name='prefix'/>
      <attribute name='project'/>
      <attribute name='dir' default='${tree.top}/@{prefix}/@{project}'/>
      <attribute name='target' default='@{project}'/>
      <sequential>
         <abacus.project.build dir='@{dir}' project='@{project}' target='@{target}'/>
      </sequential>
   </macrodef>

   <!-- build.dependent.library dir='components/abacus-base'/ -->
   <!-- build.dependent prefix='components' project='abacus-base'/ -->

   <macrodef name='build.dependent.library'>
      <attribute name='dir'/>
      <attribute name='prefix' default='NOT SET'/>
      <attribute name='project' default='NOT SET'/>
      <attribute name='target' default='NOT SET'/>
      <sequential>
         <local name='project'/>
         <if>
            <equals arg1='@{project}' arg2='NOT SET'/>
            <then>
               <basename property='project' file='@{dir}'/>
            </then>
            <else>
               <property name='project' value='@{project}'/>
            </else>
         </if>
         <local name='target'/>
         <if>
            <equals arg1='@{target}' arg2='NOT SET'/>
            <then>
               <property name='target' value='${project}'/>
            </then>
            <else>
               <property name='target' value='@{target}'/>
            </else>
         </if>
         <local name='prefix'/>
         <if>
            <equals arg1='@{prefix}' arg2='NOT SET'/>
            <then>
               <basename property='prefix' file='@{dir}/..'/>
            </then>
            <else>
               <property name='prefix' value='@{prefix}'/>
            </else>
         </if>
         <local name='dir'/>
         <property name='dir' location='${tree.top}/@{dir}'/>
         <!-- echo message='build.dependent prefix=${prefix} project=${project} target=${target} dir=${dir}'/ -->
         <build.dependent prefix='${prefix}' project='${project}' dir='${dir}' target='${target}'/>
      </sequential>
   </macrodef>

   <macrodef name='build.dependent.library.old'>
      <attribute name='dir'/>
      <sequential>
          <uptodate property='up-to-date-@{dir}' targetfile='${tmp.dir}/../@{dir}/@{dir}.built.at'>
              <srcfiles dir='${tree.top}/@{dir}' includes='**/*'/>
          </uptodate>
          <if>
              <not>
                  <isset property='up-to-date-@{dir}'/>
              </not>
              <then>
                  <if>
                     <available file='${tree.top}/@{dir}/build.xml'/>
                     <then>
                        <subant inheritrefs='false' target='dist'>
                           <fileset dir='${tree.top}/@{dir}' includes='build.xml'/>
                        </subant>
                    </then>
                    <else>
                       <fail message='cannot find dependent library @{dir} to build'/>
                    </else>
                 </if>
              </then>
              <else>
                  <echo message='@{dir} already up to date'/>
              </else>
          </if>
      </sequential>
   </macrodef>

   <target name='mark.build.complete'>
      <mark.build.complete/>
   </target>

   <target name='identify.build'>
      <identify.build/>
   </target>

   <target name='distribute' depends='rpm'/>

   <target name='dist' depends='distribute' description='Creates distributable'>
      <echo message='${product.name} Distribution Package created.'/>
   </target>

   <target name='rpm'/>

   <target name='clean'>
      <if>
         <available file="${dist.product}" type="dir" />
         <then>
            <delete dir="${dist.product}" failonerror='true'/>
         </then>
      </if>
      <if>
         <available file="${ivy.report.dir}" type="dir" />
         <then>
            <delete dir="${ivy.report.dir}" failonerror='true'/>
         </then>
      </if>
      <if>
         <available file="${build.done.flag}" type="file" />
         <then>
            <delete file="${build.done.flag}" failonerror='true'/>
         </then>
      </if>
   </target>

   <target name='clean-all' depends='clean'>
      <ivy.clean.cache/>
      <delete dir='${user.home}/.ivy2'/>
   </target>

    <macrodef name="build.sub.project">
        <attribute name="dir"/>
        <attribute name="target"/>
        <sequential>
            <subant target="@{target}">
                <fileset dir="@{dir}" includes="build.xml"/>
            </subant>
        </sequential>
    </macrodef>

</project>
